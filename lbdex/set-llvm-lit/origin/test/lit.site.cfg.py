# Autogenerated from /Users/cschen/llvm/test/llvm/test/lit.site.cfg.py.in
# Do not edit!

# Allow generated file to be relocatable.
def path(p):
    if not p: return ''
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), p)


import sys

config.host_triple = "arm64-apple-darwin20.6.0"
config.target_triple = "cpu0-unknown-elf"
config.llvm_src_root = path(r"/Users/cschen/llvm/test/llvm")
config.llvm_obj_root = path(r"/Users/cschen/llvm/test/build")
config.llvm_tools_dir = path(r"/Users/cschen/llvm/test/build/./bin")
config.llvm_lib_dir = path(r"/Users/cschen/llvm/test/build/./lib")
config.llvm_shlib_dir = path(r"/Users/cschen/llvm/test/build/./lib")
config.llvm_shlib_ext = ".dylib"
config.llvm_exe_ext = ""
config.lit_tools_dir = path(r"")
config.python_executable = "/opt/homebrew/Frameworks/Python.framework/Versions/3.9/bin/python3.9"
config.gold_executable = "/opt/homebrew/bin/riscv64-unknown-elf-ld"
config.ld64_executable = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld"
config.ocamlfind_executable = "OCAMLFIND-NOTFOUND"
config.have_ocamlopt = 0
config.have_ocaml_ounit = 0
config.ocaml_flags = ""
config.include_go_tests = 1
config.go_executable = "GO_EXECUTABLE-NOTFOUND"
config.enable_shared = 1
config.enable_assertions = 1
config.targets_to_build = " Cpu0"
config.native_target = "AArch64"
config.llvm_bindings = "".split(' ')
config.host_os = "Darwin"
config.host_cc = "/opt/homebrew/opt/llvm/bin/clang "
config.host_cxx = "/opt/homebrew/opt/llvm/bin/clang++ "
# Note: ldflags can contain double-quoted paths, so must use single quotes here.
config.host_ldflags = ''
config.llvm_use_intel_jitevents = 0
config.llvm_use_sanitizer = ""
config.have_zlib = 1
config.have_libxar = 1
config.have_libxml2 = 1
config.have_dia_sdk = 0
config.enable_ffi = 0
config.build_examples = 0
config.enable_threads = 1
config.build_shared_libs = 0
config.link_llvm_dylib = 0
config.llvm_host_triple = 'arm64-apple-darwin20.6.0'
config.host_arch = "arm64"
config.have_opt_viewer_modules = 0
config.libcxx_used = 0
config.has_plugins = 1
config.linked_bye_extension = 0
config.have_tf_aot = 0
config.have_tf_api = 0
config.expensive_checks = 0

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))

import lit.llvm
lit.llvm.initialize(lit_config, config)

# Let the main config do the real work.
lit_config.load_config(
    config, os.path.join(config.llvm_src_root, "test/lit.cfg.py"))
